package com.smsanalytic.lotto.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "debt_tb".
*/
public class DebtObjectDao extends AbstractDao<DebtObject, Long> {

    public static final String TABLENAME = "debt_tb";

    /**
     * Properties of entity DebtObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdDebt = new Property(0, Long.class, "idDebt", true, "_id");
        public final static Property SmsRoot = new Property(1, String.class, "smsRoot", false, "sms_root");
        public final static Property IdAccouunt = new Property(2, String.class, "idAccouunt", false, "id_account");
        public final static Property AccountName = new Property(3, String.class, "accountName", false, "account_name");
        public final static Property Date = new Property(4, long.class, "date", false, "date");
        public final static Property Expenses = new Property(5, double.class, "expenses", false, "expenses");
        public final static Property Oldebt = new Property(6, double.class, "oldebt", false, "old_debt");
        public final static Property MoneyPay = new Property(7, double.class, "moneyPay", false, "money_pay");
        public final static Property MoneyReceived = new Property(8, double.class, "moneyReceived", false, "money_received");
    }


    public DebtObjectDao(DaoConfig config) {
        super(config);
    }
    
    public DebtObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"debt_tb\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idDebt
                "\"sms_root\" TEXT," + // 1: smsRoot
                "\"id_account\" TEXT," + // 2: idAccouunt
                "\"account_name\" TEXT," + // 3: accountName
                "\"date\" INTEGER NOT NULL ," + // 4: date
                "\"expenses\" REAL NOT NULL ," + // 5: expenses
                "\"old_debt\" REAL NOT NULL ," + // 6: oldebt
                "\"money_pay\" REAL NOT NULL ," + // 7: moneyPay
                "\"money_received\" REAL NOT NULL );"); // 8: moneyReceived
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"debt_tb\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DebtObject entity) {
        stmt.clearBindings();
 
        Long idDebt = entity.getIdDebt();
        if (idDebt != null) {
            stmt.bindLong(1, idDebt);
        }
 
        String smsRoot = entity.getSmsRoot();
        if (smsRoot != null) {
            stmt.bindString(2, smsRoot);
        }
 
        String idAccouunt = entity.getIdAccouunt();
        if (idAccouunt != null) {
            stmt.bindString(3, idAccouunt);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(4, accountName);
        }
        stmt.bindLong(5, entity.getDate());
        stmt.bindDouble(6, entity.getExpenses());
        stmt.bindDouble(7, entity.getOldebt());
        stmt.bindDouble(8, entity.getMoneyPay());
        stmt.bindDouble(9, entity.getMoneyReceived());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DebtObject entity) {
        stmt.clearBindings();
 
        Long idDebt = entity.getIdDebt();
        if (idDebt != null) {
            stmt.bindLong(1, idDebt);
        }
 
        String smsRoot = entity.getSmsRoot();
        if (smsRoot != null) {
            stmt.bindString(2, smsRoot);
        }
 
        String idAccouunt = entity.getIdAccouunt();
        if (idAccouunt != null) {
            stmt.bindString(3, idAccouunt);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(4, accountName);
        }
        stmt.bindLong(5, entity.getDate());
        stmt.bindDouble(6, entity.getExpenses());
        stmt.bindDouble(7, entity.getOldebt());
        stmt.bindDouble(8, entity.getMoneyPay());
        stmt.bindDouble(9, entity.getMoneyReceived());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DebtObject readEntity(Cursor cursor, int offset) {
        DebtObject entity = new DebtObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idDebt
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // smsRoot
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idAccouunt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accountName
            cursor.getLong(offset + 4), // date
            cursor.getDouble(offset + 5), // expenses
            cursor.getDouble(offset + 6), // oldebt
            cursor.getDouble(offset + 7), // moneyPay
            cursor.getDouble(offset + 8) // moneyReceived
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DebtObject entity, int offset) {
        entity.setIdDebt(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSmsRoot(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdAccouunt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccountName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.getLong(offset + 4));
        entity.setExpenses(cursor.getDouble(offset + 5));
        entity.setOldebt(cursor.getDouble(offset + 6));
        entity.setMoneyPay(cursor.getDouble(offset + 7));
        entity.setMoneyReceived(cursor.getDouble(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DebtObject entity, long rowId) {
        entity.setIdDebt(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DebtObject entity) {
        if(entity != null) {
            return entity.getIdDebt();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DebtObject entity) {
        return entity.getIdDebt() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

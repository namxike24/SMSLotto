package com.smsanalytic.lotto.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "sms_tb".
*/
public class SmsObjectDao extends AbstractDao<SmsObject, Long> {

    public static final String TABLENAME = "sms_tb";

    /**
     * Properties of entity SmsObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdSms = new Property(0, Long.class, "idSms", true, "_id");
        public final static Property Guid = new Property(1, String.class, "guid", false, "guid");
        public final static Property SmsRoot = new Property(2, String.class, "smsRoot", false, "sms_root");
        public final static Property SmsProcessed = new Property(3, String.class, "smsProcessed", false, "sms_processed");
        public final static Property SmsType = new Property(4, int.class, "smsType", false, "sms_type");
        public final static Property IdAccouunt = new Property(5, String.class, "idAccouunt", false, "id_account");
        public final static Property GroupTitle = new Property(6, String.class, "groupTitle", false, "group_title");
        public final static Property Date = new Property(7, long.class, "date", false, "date");
        public final static Property SmsStatus = new Property(8, int.class, "smsStatus", false, "sms_status");
        public final static Property IsSuccess = new Property(9, boolean.class, "isSuccess", false, "is_success");
        public final static Property SmsFormatFailed = new Property(10, String.class, "smsFormatFailed", false, "sms_format_failed");
        public final static Property MesError = new Property(11, String.class, "mesError", false, "mes_error");
        public final static Property LotoHitDetail = new Property(12, String.class, "lotoHitDetail", false, "lotoHitDetail");
        public final static Property Checkbox = new Property(13, boolean.class, "checkbox", false, "checkbox");
    }


    public SmsObjectDao(DaoConfig config) {
        super(config);
    }
    
    public SmsObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"sms_tb\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idSms
                "\"guid\" TEXT," + // 1: guid
                "\"sms_root\" TEXT," + // 2: smsRoot
                "\"sms_processed\" TEXT," + // 3: smsProcessed
                "\"sms_type\" INTEGER NOT NULL ," + // 4: smsType
                "\"id_account\" TEXT," + // 5: idAccouunt
                "\"group_title\" TEXT," + // 6: groupTitle
                "\"date\" INTEGER NOT NULL ," + // 7: date
                "\"sms_status\" INTEGER NOT NULL ," + // 8: smsStatus
                "\"is_success\" INTEGER NOT NULL ," + // 9: isSuccess
                "\"sms_format_failed\" TEXT," + // 10: smsFormatFailed
                "\"mes_error\" TEXT," + // 11: mesError
                "\"lotoHitDetail\" TEXT," + // 12: lotoHitDetail
                "\"checkbox\" INTEGER NOT NULL );"); // 13: checkbox
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"sms_tb\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmsObject entity) {
        stmt.clearBindings();
 
        Long idSms = entity.getIdSms();
        if (idSms != null) {
            stmt.bindLong(1, idSms);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String smsRoot = entity.getSmsRoot();
        if (smsRoot != null) {
            stmt.bindString(3, smsRoot);
        }
 
        String smsProcessed = entity.getSmsProcessed();
        if (smsProcessed != null) {
            stmt.bindString(4, smsProcessed);
        }
        stmt.bindLong(5, entity.getSmsType());
 
        String idAccouunt = entity.getIdAccouunt();
        if (idAccouunt != null) {
            stmt.bindString(6, idAccouunt);
        }
 
        String groupTitle = entity.getGroupTitle();
        if (groupTitle != null) {
            stmt.bindString(7, groupTitle);
        }
        stmt.bindLong(8, entity.getDate());
        stmt.bindLong(9, entity.getSmsStatus());
        stmt.bindLong(10, entity.getIsSuccess() ? 1L: 0L);
 
        String smsFormatFailed = entity.getSmsFormatFailed();
        if (smsFormatFailed != null) {
            stmt.bindString(11, smsFormatFailed);
        }
 
        String mesError = entity.getMesError();
        if (mesError != null) {
            stmt.bindString(12, mesError);
        }
 
        String lotoHitDetail = entity.getLotoHitDetail();
        if (lotoHitDetail != null) {
            stmt.bindString(13, lotoHitDetail);
        }
        stmt.bindLong(14, entity.getCheckbox() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmsObject entity) {
        stmt.clearBindings();
 
        Long idSms = entity.getIdSms();
        if (idSms != null) {
            stmt.bindLong(1, idSms);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String smsRoot = entity.getSmsRoot();
        if (smsRoot != null) {
            stmt.bindString(3, smsRoot);
        }
 
        String smsProcessed = entity.getSmsProcessed();
        if (smsProcessed != null) {
            stmt.bindString(4, smsProcessed);
        }
        stmt.bindLong(5, entity.getSmsType());
 
        String idAccouunt = entity.getIdAccouunt();
        if (idAccouunt != null) {
            stmt.bindString(6, idAccouunt);
        }
 
        String groupTitle = entity.getGroupTitle();
        if (groupTitle != null) {
            stmt.bindString(7, groupTitle);
        }
        stmt.bindLong(8, entity.getDate());
        stmt.bindLong(9, entity.getSmsStatus());
        stmt.bindLong(10, entity.getIsSuccess() ? 1L: 0L);
 
        String smsFormatFailed = entity.getSmsFormatFailed();
        if (smsFormatFailed != null) {
            stmt.bindString(11, smsFormatFailed);
        }
 
        String mesError = entity.getMesError();
        if (mesError != null) {
            stmt.bindString(12, mesError);
        }
 
        String lotoHitDetail = entity.getLotoHitDetail();
        if (lotoHitDetail != null) {
            stmt.bindString(13, lotoHitDetail);
        }
        stmt.bindLong(14, entity.getCheckbox() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SmsObject readEntity(Cursor cursor, int offset) {
        SmsObject entity = new SmsObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idSms
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // smsRoot
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // smsProcessed
            cursor.getInt(offset + 4), // smsType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idAccouunt
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // groupTitle
            cursor.getLong(offset + 7), // date
            cursor.getInt(offset + 8), // smsStatus
            cursor.getShort(offset + 9) != 0, // isSuccess
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // smsFormatFailed
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mesError
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lotoHitDetail
            cursor.getShort(offset + 13) != 0 // checkbox
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmsObject entity, int offset) {
        entity.setIdSms(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSmsRoot(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSmsProcessed(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSmsType(cursor.getInt(offset + 4));
        entity.setIdAccouunt(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.getLong(offset + 7));
        entity.setSmsStatus(cursor.getInt(offset + 8));
        entity.setIsSuccess(cursor.getShort(offset + 9) != 0);
        entity.setSmsFormatFailed(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMesError(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLotoHitDetail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCheckbox(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SmsObject entity, long rowId) {
        entity.setIdSms(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SmsObject entity) {
        if(entity != null) {
            return entity.getIdSms();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmsObject entity) {
        return entity.getIdSms() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

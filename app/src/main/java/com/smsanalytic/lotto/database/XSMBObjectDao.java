package com.smsanalytic.lotto.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "xsmb_tb".
*/
public class XSMBObjectDao extends AbstractDao<XSMBObject, Long> {

    public static final String TABLENAME = "xsmb_tb";

    /**
     * Properties of entity XSMBObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property XsmbID = new Property(0, Long.class, "xsmbID", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "date");
        public final static Property Result = new Property(2, String.class, "result", false, "result");
    }


    public XSMBObjectDao(DaoConfig config) {
        super(config);
    }
    
    public XSMBObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"xsmb_tb\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: xsmbID
                "\"date\" TEXT," + // 1: date
                "\"result\" TEXT);"); // 2: result
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"xsmb_tb\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, XSMBObject entity) {
        stmt.clearBindings();
 
        Long xsmbID = entity.getXsmbID();
        if (xsmbID != null) {
            stmt.bindLong(1, xsmbID);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(3, result);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, XSMBObject entity) {
        stmt.clearBindings();
 
        Long xsmbID = entity.getXsmbID();
        if (xsmbID != null) {
            stmt.bindLong(1, xsmbID);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(3, result);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public XSMBObject readEntity(Cursor cursor, int offset) {
        XSMBObject entity = new XSMBObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // xsmbID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // result
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XSMBObject entity, int offset) {
        entity.setXsmbID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResult(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(XSMBObject entity, long rowId) {
        entity.setXsmbID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(XSMBObject entity) {
        if(entity != null) {
            return entity.getXsmbID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(XSMBObject entity) {
        return entity.getXsmbID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.smsanalytic.lotto.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "account_tb".
*/
public class AccountObjectDao extends AbstractDao<AccountObject, Long> {

    public static final String TABLENAME = "account_tb";

    /**
     * Properties of entity AccountObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoAccount = new Property(0, Long.class, "noAccount", true, "_id");
        public final static Property IdAccount = new Property(1, String.class, "idAccount", false, "id_account");
        public final static Property AccountName = new Property(2, String.class, "accountName", false, "account_name");
        public final static Property ThemCallYou = new Property(3, String.class, "themCallYou", false, "them_call_you");
        public final static Property YouCallThem = new Property(4, String.class, "youCallThem", false, "you_call_them");
        public final static Property Phone = new Property(5, String.class, "phone", false, "phone");
        public final static Property DateCreate = new Property(6, long.class, "dateCreate", false, "date_create");
        public final static Property AccountType = new Property(7, int.class, "accountType", false, "account_type");
        public final static Property AccountStatus = new Property(8, int.class, "accountStatus", false, "account_status");
        public final static Property AccountRate = new Property(9, String.class, "accountRate", false, "account_rate");
        public final static Property AccountSetting = new Property(10, String.class, "accountSetting", false, "account_setting");
    }


    public AccountObjectDao(DaoConfig config) {
        super(config);
    }
    
    public AccountObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"account_tb\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: noAccount
                "\"id_account\" TEXT," + // 1: idAccount
                "\"account_name\" TEXT," + // 2: accountName
                "\"them_call_you\" TEXT," + // 3: themCallYou
                "\"you_call_them\" TEXT," + // 4: youCallThem
                "\"phone\" TEXT," + // 5: phone
                "\"date_create\" INTEGER NOT NULL ," + // 6: dateCreate
                "\"account_type\" INTEGER NOT NULL ," + // 7: accountType
                "\"account_status\" INTEGER NOT NULL ," + // 8: accountStatus
                "\"account_rate\" TEXT," + // 9: accountRate
                "\"account_setting\" TEXT);"); // 10: accountSetting
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"account_tb\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountObject entity) {
        stmt.clearBindings();
 
        Long noAccount = entity.getNoAccount();
        if (noAccount != null) {
            stmt.bindLong(1, noAccount);
        }
 
        String idAccount = entity.getIdAccount();
        if (idAccount != null) {
            stmt.bindString(2, idAccount);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(3, accountName);
        }
 
        String themCallYou = entity.getThemCallYou();
        if (themCallYou != null) {
            stmt.bindString(4, themCallYou);
        }
 
        String youCallThem = entity.getYouCallThem();
        if (youCallThem != null) {
            stmt.bindString(5, youCallThem);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getDateCreate());
        stmt.bindLong(8, entity.getAccountType());
        stmt.bindLong(9, entity.getAccountStatus());
 
        String accountRate = entity.getAccountRate();
        if (accountRate != null) {
            stmt.bindString(10, accountRate);
        }
 
        String accountSetting = entity.getAccountSetting();
        if (accountSetting != null) {
            stmt.bindString(11, accountSetting);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountObject entity) {
        stmt.clearBindings();
 
        Long noAccount = entity.getNoAccount();
        if (noAccount != null) {
            stmt.bindLong(1, noAccount);
        }
 
        String idAccount = entity.getIdAccount();
        if (idAccount != null) {
            stmt.bindString(2, idAccount);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(3, accountName);
        }
 
        String themCallYou = entity.getThemCallYou();
        if (themCallYou != null) {
            stmt.bindString(4, themCallYou);
        }
 
        String youCallThem = entity.getYouCallThem();
        if (youCallThem != null) {
            stmt.bindString(5, youCallThem);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getDateCreate());
        stmt.bindLong(8, entity.getAccountType());
        stmt.bindLong(9, entity.getAccountStatus());
 
        String accountRate = entity.getAccountRate();
        if (accountRate != null) {
            stmt.bindString(10, accountRate);
        }
 
        String accountSetting = entity.getAccountSetting();
        if (accountSetting != null) {
            stmt.bindString(11, accountSetting);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountObject readEntity(Cursor cursor, int offset) {
        AccountObject entity = new AccountObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // noAccount
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idAccount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accountName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // themCallYou
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // youCallThem
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.getLong(offset + 6), // dateCreate
            cursor.getInt(offset + 7), // accountType
            cursor.getInt(offset + 8), // accountStatus
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // accountRate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // accountSetting
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountObject entity, int offset) {
        entity.setNoAccount(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccountName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThemCallYou(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYouCallThem(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDateCreate(cursor.getLong(offset + 6));
        entity.setAccountType(cursor.getInt(offset + 7));
        entity.setAccountStatus(cursor.getInt(offset + 8));
        entity.setAccountRate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAccountSetting(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountObject entity, long rowId) {
        entity.setNoAccount(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountObject entity) {
        if(entity != null) {
            return entity.getNoAccount();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountObject entity) {
        return entity.getNoAccount() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.smsanalytic.lotto.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "loto_number_tb".
*/
public class LotoNumberObjectDao extends AbstractDao<LotoNumberObject, Long> {

    public static final String TABLENAME = "loto_number_tb";

    /**
     * Properties of entity LotoNumberObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdLotoNumber = new Property(0, Long.class, "idLotoNumber", true, "_id");
        public final static Property Value1 = new Property(1, String.class, "value1", false, "value_1");
        public final static Property Value2 = new Property(2, String.class, "value2", false, "value_2");
        public final static Property Value3 = new Property(3, String.class, "value3", false, "value_3");
        public final static Property Value4 = new Property(4, String.class, "value4", false, "value_4");
        public final static Property MoneyTake = new Property(5, double.class, "moneyTake", false, "money_take");
        public final static Property MoneySend = new Property(6, double.class, "moneySend", false, "money_send");
        public final static Property MoneyKeep = new Property(7, double.class, "moneyKeep", false, "money_keep");
        public final static Property AccountSend = new Property(8, String.class, "accountSend", false, "account_send");
        public final static Property DateTake = new Property(9, long.class, "dateTake", false, "date_take");
        public final static Property DateString = new Property(10, String.class, "dateString", false, "date_string");
        public final static Property Guid = new Property(11, String.class, "guid", false, "guid");
        public final static Property Nhay = new Property(12, int.class, "nhay", false, "nhay");
        public final static Property Hit = new Property(13, boolean.class, "hit", false, "hit");
        public final static Property Type = new Property(14, int.class, "type", false, "type");
        public final static Property SeChuyen = new Property(15, double.class, "seChuyen", false, "se_chuyen");
        public final static Property XienFormat = new Property(16, String.class, "xienFormat", false, "xien_format");
        public final static Property SmsStatus = new Property(17, int.class, "smsStatus", false, "sms_status");
    }


    public LotoNumberObjectDao(DaoConfig config) {
        super(config);
    }
    
    public LotoNumberObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"loto_number_tb\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idLotoNumber
                "\"value_1\" TEXT," + // 1: value1
                "\"value_2\" TEXT," + // 2: value2
                "\"value_3\" TEXT," + // 3: value3
                "\"value_4\" TEXT," + // 4: value4
                "\"money_take\" REAL NOT NULL ," + // 5: moneyTake
                "\"money_send\" REAL NOT NULL ," + // 6: moneySend
                "\"money_keep\" REAL NOT NULL ," + // 7: moneyKeep
                "\"account_send\" TEXT," + // 8: accountSend
                "\"date_take\" INTEGER NOT NULL ," + // 9: dateTake
                "\"date_string\" TEXT," + // 10: dateString
                "\"guid\" TEXT," + // 11: guid
                "\"nhay\" INTEGER NOT NULL ," + // 12: nhay
                "\"hit\" INTEGER NOT NULL ," + // 13: hit
                "\"type\" INTEGER NOT NULL ," + // 14: type
                "\"se_chuyen\" REAL NOT NULL ," + // 15: seChuyen
                "\"xien_format\" TEXT," + // 16: xienFormat
                "\"sms_status\" INTEGER NOT NULL );"); // 17: smsStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"loto_number_tb\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LotoNumberObject entity) {
        stmt.clearBindings();
 
        Long idLotoNumber = entity.getIdLotoNumber();
        if (idLotoNumber != null) {
            stmt.bindLong(1, idLotoNumber);
        }
 
        String value1 = entity.getValue1();
        if (value1 != null) {
            stmt.bindString(2, value1);
        }
 
        String value2 = entity.getValue2();
        if (value2 != null) {
            stmt.bindString(3, value2);
        }
 
        String value3 = entity.getValue3();
        if (value3 != null) {
            stmt.bindString(4, value3);
        }
 
        String value4 = entity.getValue4();
        if (value4 != null) {
            stmt.bindString(5, value4);
        }
        stmt.bindDouble(6, entity.getMoneyTake());
        stmt.bindDouble(7, entity.getMoneySend());
        stmt.bindDouble(8, entity.getMoneyKeep());
 
        String accountSend = entity.getAccountSend();
        if (accountSend != null) {
            stmt.bindString(9, accountSend);
        }
        stmt.bindLong(10, entity.getDateTake());
 
        String dateString = entity.getDateString();
        if (dateString != null) {
            stmt.bindString(11, dateString);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(12, guid);
        }
        stmt.bindLong(13, entity.getNhay());
        stmt.bindLong(14, entity.getHit() ? 1L: 0L);
        stmt.bindLong(15, entity.getType());
        stmt.bindDouble(16, entity.getSeChuyen());
 
        String xienFormat = entity.getXienFormat();
        if (xienFormat != null) {
            stmt.bindString(17, xienFormat);
        }
        stmt.bindLong(18, entity.getSmsStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LotoNumberObject entity) {
        stmt.clearBindings();
 
        Long idLotoNumber = entity.getIdLotoNumber();
        if (idLotoNumber != null) {
            stmt.bindLong(1, idLotoNumber);
        }
 
        String value1 = entity.getValue1();
        if (value1 != null) {
            stmt.bindString(2, value1);
        }
 
        String value2 = entity.getValue2();
        if (value2 != null) {
            stmt.bindString(3, value2);
        }
 
        String value3 = entity.getValue3();
        if (value3 != null) {
            stmt.bindString(4, value3);
        }
 
        String value4 = entity.getValue4();
        if (value4 != null) {
            stmt.bindString(5, value4);
        }
        stmt.bindDouble(6, entity.getMoneyTake());
        stmt.bindDouble(7, entity.getMoneySend());
        stmt.bindDouble(8, entity.getMoneyKeep());
 
        String accountSend = entity.getAccountSend();
        if (accountSend != null) {
            stmt.bindString(9, accountSend);
        }
        stmt.bindLong(10, entity.getDateTake());
 
        String dateString = entity.getDateString();
        if (dateString != null) {
            stmt.bindString(11, dateString);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(12, guid);
        }
        stmt.bindLong(13, entity.getNhay());
        stmt.bindLong(14, entity.getHit() ? 1L: 0L);
        stmt.bindLong(15, entity.getType());
        stmt.bindDouble(16, entity.getSeChuyen());
 
        String xienFormat = entity.getXienFormat();
        if (xienFormat != null) {
            stmt.bindString(17, xienFormat);
        }
        stmt.bindLong(18, entity.getSmsStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LotoNumberObject readEntity(Cursor cursor, int offset) {
        LotoNumberObject entity = new LotoNumberObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idLotoNumber
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // value1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // value2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // value3
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // value4
            cursor.getDouble(offset + 5), // moneyTake
            cursor.getDouble(offset + 6), // moneySend
            cursor.getDouble(offset + 7), // moneyKeep
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // accountSend
            cursor.getLong(offset + 9), // dateTake
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dateString
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // guid
            cursor.getInt(offset + 12), // nhay
            cursor.getShort(offset + 13) != 0, // hit
            cursor.getInt(offset + 14), // type
            cursor.getDouble(offset + 15), // seChuyen
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // xienFormat
            cursor.getInt(offset + 17) // smsStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LotoNumberObject entity, int offset) {
        entity.setIdLotoNumber(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setValue1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValue4(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMoneyTake(cursor.getDouble(offset + 5));
        entity.setMoneySend(cursor.getDouble(offset + 6));
        entity.setMoneyKeep(cursor.getDouble(offset + 7));
        entity.setAccountSend(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDateTake(cursor.getLong(offset + 9));
        entity.setDateString(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGuid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNhay(cursor.getInt(offset + 12));
        entity.setHit(cursor.getShort(offset + 13) != 0);
        entity.setType(cursor.getInt(offset + 14));
        entity.setSeChuyen(cursor.getDouble(offset + 15));
        entity.setXienFormat(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSmsStatus(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LotoNumberObject entity, long rowId) {
        entity.setIdLotoNumber(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LotoNumberObject entity) {
        if(entity != null) {
            return entity.getIdLotoNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LotoNumberObject entity) {
        return entity.getIdLotoNumber() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
